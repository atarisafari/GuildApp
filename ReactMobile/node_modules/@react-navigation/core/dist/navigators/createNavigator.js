function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import invariant from '../utils/invariant';

function createNavigator(NavigatorView, router, navigationConfig) {
  class Navigator extends React.Component {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "state", {
        descriptors: {},
        screenProps: this.props.screenProps
      });
    }

    static getDerivedStateFromProps(nextProps, prevState) {
      var prevDescriptors = prevState.descriptors;
      var {
        navigation,
        screenProps
      } = nextProps;
      invariant(navigation != null, 'The navigation prop is missing for this navigator. In react-navigation 3 you must set up your app container directly. More info: https://reactnavigation.org/docs/en/app-containers.html');
      var {
        state
      } = navigation;
      var {
        routes
      } = state;

      if (typeof routes === 'undefined') {
        throw new TypeError('No "routes" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop');
      }

      var descriptors = {};
      routes.forEach(route => {
        if (prevDescriptors && prevDescriptors[route.key] && route === prevDescriptors[route.key].state && screenProps === prevState.screenProps) {
          descriptors[route.key] = prevDescriptors[route.key];
          return;
        }

        var getComponent = router.getComponentForRouteName.bind(null, route.routeName);
        var childNavigation = navigation.getChildNavigation(route.key);
        var options = router.getScreenOptions(childNavigation, screenProps);
        descriptors[route.key] = {
          key: route.key,
          getComponent,
          options,
          state: route,
          navigation: childNavigation
        };
      });
      return {
        descriptors,
        screenProps
      };
    }

    render() {
      return React.createElement(NavigatorView, _extends({}, this.props, {
        screenProps: this.state.screenProps,
        navigation: this.props.navigation,
        navigationConfig: navigationConfig,
        descriptors: this.state.descriptors
      }));
    }

  }

  _defineProperty(Navigator, "router", router);

  _defineProperty(Navigator, "navigationOptions", navigationConfig.navigationOptions);

  return Navigator;
}

export default createNavigator;
//# sourceMappingURL=createNavigator.js.map