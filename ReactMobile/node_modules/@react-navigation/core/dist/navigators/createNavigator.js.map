{"version":3,"sources":["../../src/navigators/createNavigator.js"],"names":["React","invariant","createNavigator","NavigatorView","router","navigationConfig","Navigator","Component","descriptors","screenProps","props","getDerivedStateFromProps","nextProps","prevState","prevDescriptors","navigation","state","routes","TypeError","forEach","route","key","getComponent","getComponentForRouteName","bind","routeName","childNavigation","getChildNavigation","options","getScreenOptions","render","navigationOptions"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;AAEA,SAASC,eAAT,CAAyBC,aAAzB,EAAwCC,MAAxC,EAAgDC,gBAAhD,EAAkE;AAChE,QAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AAAA;AAAA;;AAAA,qCAI9B;AACNC,QAAAA,WAAW,EAAE,EADP;AAENC,QAAAA,WAAW,EAAE,KAAKC,KAAL,CAAWD;AAFlB,OAJ8B;AAAA;;AAStC,WAAOE,wBAAP,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AACpD,UAAMC,eAAe,GAAGD,SAAS,CAACL,WAAlC;AACA,UAAM;AAAEO,QAAAA,UAAF;AAAcN,QAAAA;AAAd,UAA8BG,SAApC;AACAX,MAAAA,SAAS,CACPc,UAAU,IAAI,IADP,EAEP,0LAFO,CAAT;AAIA,UAAM;AAAEC,QAAAA;AAAF,UAAYD,UAAlB;AACA,UAAM;AAAEE,QAAAA;AAAF,UAAaD,KAAnB;;AACA,UAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,cAAM,IAAIC,SAAJ,CACJ,oNADI,CAAN;AAGD;;AAED,UAAMV,WAAW,GAAG,EAApB;AAEAS,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAI;AACtB,YACEN,eAAe,IACfA,eAAe,CAACM,KAAK,CAACC,GAAP,CADf,IAEAD,KAAK,KAAKN,eAAe,CAACM,KAAK,CAACC,GAAP,CAAf,CAA2BL,KAFrC,IAGAP,WAAW,KAAKI,SAAS,CAACJ,WAJ5B,EAKE;AACAD,UAAAA,WAAW,CAACY,KAAK,CAACC,GAAP,CAAX,GAAyBP,eAAe,CAACM,KAAK,CAACC,GAAP,CAAxC;AACA;AACD;;AACD,YAAMC,YAAY,GAAGlB,MAAM,CAACmB,wBAAP,CAAgCC,IAAhC,CACnB,IADmB,EAEnBJ,KAAK,CAACK,SAFa,CAArB;AAIA,YAAMC,eAAe,GAAGX,UAAU,CAACY,kBAAX,CAA8BP,KAAK,CAACC,GAApC,CAAxB;AACA,YAAMO,OAAO,GAAGxB,MAAM,CAACyB,gBAAP,CAAwBH,eAAxB,EAAyCjB,WAAzC,CAAhB;AACAD,QAAAA,WAAW,CAACY,KAAK,CAACC,GAAP,CAAX,GAAyB;AACvBA,UAAAA,GAAG,EAAED,KAAK,CAACC,GADY;AAEvBC,UAAAA,YAFuB;AAGvBM,UAAAA,OAHuB;AAIvBZ,UAAAA,KAAK,EAAEI,KAJgB;AAKvBL,UAAAA,UAAU,EAAEW;AALW,SAAzB;AAOD,OAvBD;AAyBA,aAAO;AAAElB,QAAAA,WAAF;AAAeC,QAAAA;AAAf,OAAP;AACD;;AAEDqB,IAAAA,MAAM,GAAG;AACP,aACE,oBAAC,aAAD,eACM,KAAKpB,KADX;AAEE,QAAA,WAAW,EAAE,KAAKM,KAAL,CAAWP,WAF1B;AAGE,QAAA,UAAU,EAAE,KAAKC,KAAL,CAAWK,UAHzB;AAIE,QAAA,gBAAgB,EAAEV,gBAJpB;AAKE,QAAA,WAAW,EAAE,KAAKW,KAAL,CAAWR;AAL1B,SADF;AASD;;AAhEqC;;AADwB,kBAC1DF,SAD0D,YAE9CF,MAF8C;;AAAA,kBAC1DE,SAD0D,uBAGnCD,gBAAgB,CAAC0B,iBAHkB;;AAoEhE,SAAOzB,SAAP;AACD;;AAED,eAAeJ,eAAf","sourcesContent":["import React from 'react';\nimport invariant from '../utils/invariant';\n\nfunction createNavigator(NavigatorView, router, navigationConfig) {\n  class Navigator extends React.Component {\n    static router = router;\n    static navigationOptions = navigationConfig.navigationOptions;\n\n    state = {\n      descriptors: {},\n      screenProps: this.props.screenProps,\n    };\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n      const prevDescriptors = prevState.descriptors;\n      const { navigation, screenProps } = nextProps;\n      invariant(\n        navigation != null,\n        'The navigation prop is missing for this navigator. In react-navigation 3 you must set up your app container directly. More info: https://reactnavigation.org/docs/en/app-containers.html'\n      );\n      const { state } = navigation;\n      const { routes } = state;\n      if (typeof routes === 'undefined') {\n        throw new TypeError(\n          'No \"routes\" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop'\n        );\n      }\n\n      const descriptors = {};\n\n      routes.forEach(route => {\n        if (\n          prevDescriptors &&\n          prevDescriptors[route.key] &&\n          route === prevDescriptors[route.key].state &&\n          screenProps === prevState.screenProps\n        ) {\n          descriptors[route.key] = prevDescriptors[route.key];\n          return;\n        }\n        const getComponent = router.getComponentForRouteName.bind(\n          null,\n          route.routeName\n        );\n        const childNavigation = navigation.getChildNavigation(route.key);\n        const options = router.getScreenOptions(childNavigation, screenProps);\n        descriptors[route.key] = {\n          key: route.key,\n          getComponent,\n          options,\n          state: route,\n          navigation: childNavigation,\n        };\n      });\n\n      return { descriptors, screenProps };\n    }\n\n    render() {\n      return (\n        <NavigatorView\n          {...this.props}\n          screenProps={this.state.screenProps}\n          navigation={this.props.navigation}\n          navigationConfig={navigationConfig}\n          descriptors={this.state.descriptors}\n        />\n      );\n    }\n  }\n\n  return Navigator;\n}\n\nexport default createNavigator;\n"],"file":"createNavigator.js"}