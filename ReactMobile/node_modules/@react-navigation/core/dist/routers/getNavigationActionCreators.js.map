{"version":3,"sources":["../../src/routers/getNavigationActionCreators.js"],"names":["NavigationActions","invariant","getNavigationActionCreators","route","goBack","key","actualizedKey","undefined","back","navigate","navigateTo","params","action","routeName","setParams"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,sBAA9B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;AAEA,IAAMC,2BAA2B,GAAGC,KAAK,IAAI;AAC3C,SAAO;AACLC,IAAAA,MAAM,EAAEC,GAAG,IAAI;AACb,UAAIC,aAAa,GAAGD,GAApB;;AACA,UAAIA,GAAG,KAAKE,SAAR,IAAqBJ,KAAK,CAACE,GAA/B,EAAoC;AAClCJ,QAAAA,SAAS,CAAC,OAAOE,KAAK,CAACE,GAAb,KAAqB,QAAtB,EAAgC,wBAAhC,CAAT;AACAC,QAAAA,aAAa,GAAGH,KAAK,CAACE,GAAtB;AACD;;AACD,aAAOL,iBAAiB,CAACQ,IAAlB,CAAuB;AAAEH,QAAAA,GAAG,EAAEC;AAAP,OAAvB,CAAP;AACD,KARI;AASLG,IAAAA,QAAQ,EAAE,CAACC,UAAD,EAAaC,MAAb,EAAqBC,MAArB,KAAgC;AACxC,UAAI,OAAOF,UAAP,KAAsB,QAA1B,EAAoC;AAClC,eAAOV,iBAAiB,CAACS,QAAlB,CAA2B;AAChCI,UAAAA,SAAS,EAAEH,UADqB;AAEhCC,UAAAA,MAFgC;AAGhCC,UAAAA;AAHgC,SAA3B,CAAP;AAKD;;AACDX,MAAAA,SAAS,CACP,OAAOS,UAAP,KAAsB,QADf,EAEP,uCAFO,CAAT;AAIAT,MAAAA,SAAS,CACPU,MAAM,IAAI,IADH,EAEP,sEAFO,CAAT;AAIAV,MAAAA,SAAS,CACPW,MAAM,IAAI,IADH,EAEP,4EAFO,CAAT;AAIA,aAAOZ,iBAAiB,CAACS,QAAlB,CAA2BC,UAA3B,CAAP;AACD,KA9BI;AA+BLI,IAAAA,SAAS,EAAEH,MAAM,IAAI;AACnBV,MAAAA,SAAS,CACPE,KAAK,CAACE,GAAN,IAAa,OAAOF,KAAK,CAACE,GAAb,KAAqB,QAD3B,EAEP,8CAFO,CAAT;AAIA,aAAOL,iBAAiB,CAACc,SAAlB,CAA4B;AAAEH,QAAAA,MAAF;AAAUN,QAAAA,GAAG,EAAEF,KAAK,CAACE;AAArB,OAA5B,CAAP;AACD;AArCI,GAAP;AAuCD,CAxCD;;AA0CA,eAAeH,2BAAf","sourcesContent":["import NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant';\n\nconst getNavigationActionCreators = route => {\n  return {\n    goBack: key => {\n      let actualizedKey = key;\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n      return NavigationActions.back({ key: actualizedKey });\n    },\n    navigate: (navigateTo, params, action) => {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action,\n        });\n      }\n      invariant(\n        typeof navigateTo === 'object',\n        'Must navigateTo an object or a string'\n      );\n      invariant(\n        params == null,\n        'Params must not be provided to .navigate() when specifying an object'\n      );\n      invariant(\n        action == null,\n        'Child action must not be provided to .navigate() when specifying an object'\n      );\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: params => {\n      invariant(\n        route.key && typeof route.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      return NavigationActions.setParams({ params, key: route.key });\n    },\n  };\n};\n\nexport default getNavigationActionCreators;\n"],"file":"getNavigationActionCreators.js"}