function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import invariant from '../utils/invariant';
import getScreenForRouteName from './getScreenForRouteName';
import validateScreenOptions from './validateScreenOptions';

function applyConfig(configurer, navigationOptions, configProps) {
  if (typeof configurer === 'function') {
    return _objectSpread({}, navigationOptions, configurer(_objectSpread({}, configProps, {
      navigationOptions
    })));
  }

  if (typeof configurer === 'object') {
    return _objectSpread({}, navigationOptions, configurer);
  }

  return navigationOptions;
}

export default ((routeConfigs, navigatorScreenConfig) => (navigation, screenProps) => {
  var {
    state
  } = navigation;
  var route = state;
  invariant(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');
  var Component = getScreenForRouteName(routeConfigs, route.routeName);
  var routeConfig = routeConfigs[route.routeName];
  var routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;
  var componentScreenConfig = Component.navigationOptions;
  var configOptions = {
    navigation,
    screenProps: screenProps || {}
  };
  var outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);
  outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);
  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);
  validateScreenOptions(outputConfig, route);
  return outputConfig;
});
//# sourceMappingURL=createConfigGetter.js.map