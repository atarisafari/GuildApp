{"version":3,"sources":["../../src/routers/createConfigGetter.js"],"names":["invariant","getScreenForRouteName","validateScreenOptions","applyConfig","configurer","navigationOptions","configProps","routeConfigs","navigatorScreenConfig","navigation","screenProps","state","route","routeName","Component","routeConfig","routeScreenConfig","componentScreenConfig","configOptions","outputConfig"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AAEA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAEA,SAASC,WAAT,CAAqBC,UAArB,EAAiCC,iBAAjC,EAAoDC,WAApD,EAAiE;AAC/D,MAAI,OAAOF,UAAP,KAAsB,UAA1B,EAAsC;AACpC,6BACKC,iBADL,EAEKD,UAAU,mBACRE,WADQ;AAEXD,MAAAA;AAFW,OAFf;AAOD;;AACD,MAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,6BACKC,iBADL,EAEKD,UAFL;AAID;;AACD,SAAOC,iBAAP;AACD;;AAED,gBAAe,CAACE,YAAD,EAAeC,qBAAf,KAAyC,CACtDC,UADsD,EAEtDC,WAFsD,KAGnD;AACH,MAAM;AAAEC,IAAAA;AAAF,MAAYF,UAAlB;AACA,MAAMG,KAAK,GAAGD,KAAd;AAEAX,EAAAA,SAAS,CACPY,KAAK,CAACC,SAAN,IAAmB,OAAOD,KAAK,CAACC,SAAb,KAA2B,QADvC,EAEP,gEAFO,CAAT;AAKA,MAAMC,SAAS,GAAGb,qBAAqB,CAACM,YAAD,EAAeK,KAAK,CAACC,SAArB,CAAvC;AAEA,MAAME,WAAW,GAAGR,YAAY,CAACK,KAAK,CAACC,SAAP,CAAhC;AAEA,MAAMG,iBAAiB,GACrBD,WAAW,KAAKD,SAAhB,GAA4B,IAA5B,GAAmCC,WAAW,CAACV,iBADjD;AAEA,MAAMY,qBAAqB,GAAGH,SAAS,CAACT,iBAAxC;AAEA,MAAMa,aAAa,GAAG;AAAET,IAAAA,UAAF;AAAcC,IAAAA,WAAW,EAAEA,WAAW,IAAI;AAA1C,GAAtB;AAEA,MAAIS,YAAY,GAAGhB,WAAW,CAACK,qBAAD,EAAwB,EAAxB,EAA4BU,aAA5B,CAA9B;AACAC,EAAAA,YAAY,GAAGhB,WAAW,CACxBc,qBADwB,EAExBE,YAFwB,EAGxBD,aAHwB,CAA1B;AAKAC,EAAAA,YAAY,GAAGhB,WAAW,CAACa,iBAAD,EAAoBG,YAApB,EAAkCD,aAAlC,CAA1B;AAEAhB,EAAAA,qBAAqB,CAACiB,YAAD,EAAeP,KAAf,CAArB;AAEA,SAAOO,YAAP;AACD,CAjCD","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {} };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"],"file":"createConfigGetter.js"}