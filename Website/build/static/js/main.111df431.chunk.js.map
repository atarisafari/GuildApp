{"version":3,"sources":["logo.svg","utils/testAPI.js","components/buttons/homeButton.js","App.js","pages/signUp.js","serviceWorker.js","index.js","pages/router.js"],"names":["module","exports","__webpack_require__","p","signUp","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","username","password","response","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","mode","method","headers","Accept","Content-Type","body","JSON","stringify","sent","abrupt","text","then","console","log","parse","t0","stop","_x","_x2","apply","this","HomeButton","props","react_default","createElement","onClick","history","push","path","children","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","loggedIn","display_name","profile_pic_url","_this2","_this$state","className","src","logo","alt","id","value","onChange","e","setState","objectSpread","target","type","homeButton","assign","Component","pages_signUp","_useState","useState","_useState2","slicedToArray","setusername","_useState3","_useState4","setpassword","_useState5","_useState6","setdisplay_name","_useState7","_useState8","signUpHandler","data","onBlur","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","react_router","exact","component","SignUP","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.111df431.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","//const fetch = require('node-fetch');\r\nexport const signUp = async (username,password,display_name='',profile_pic_url='') => { \r\n        \r\n    try{\r\n        let response = await fetch('http://157.230.66.35/php/signup.php', {\r\n        mode: 'cors',\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            username: username,\r\n            password: password,\r\n            //display_name: display_name,\r\n            //profile_pic_url: profile_pic_url,\r\n        })\r\n        })\r\n        return response.text().then(function(text) {\r\n            console.log(text);\r\n            return text ? JSON.parse(text) : {}\r\n        })\r\n        //return data;        \r\n    }\r\n    catch(e){\r\n        console.log(e);\r\n    }\r\n        \r\n        \r\n    }\r\n//     (response => {\r\n//     }\r\n// )\r\n// .then(res => {\r\n// this.props.history.push(\"/\");\r\n// alert(res);\r\n// console.log('response:');\r\n// console.log(JSON.stringify(res));\r\n// return res;\r\n// })\r\n// .catch( e => {\r\n//     console.log(JSON.stringify(e));\r\n//     //alert(e);\r\n// })\r\n","import React, { Component } from 'react';\r\n\r\nconst HomeButton = (props)=> {\r\n    return(\r\n        <button onClick={()=>props.history.push(props.path)}>{props.children}</button>\r\n    );\r\n}\r\nexport default HomeButton;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {signUp} from './utils/testAPI';\nimport HomeButton from './components/buttons/homeButton';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loggedIn: 'False',\n      username: '',\n      password:'',\n      display_name: '',\n      profile_pic_url: '',\n    }\n  }\n  render() {\n    const {username,password} = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div id=\"username_login\">\n            Username:\n            <input value={username} onChange= { e => this.setState({...this.state, username: e.target.value})}/>\n          </div>\n          <div id=\"password_login\">\n            Password: \n            <input type='password' value={password} onChange= { e => this.setState({...this.state, password: e.target.value})}/>\n          </div>\n          <button onClick={()=>signUp(username,password)}> LOGIN </button>\n          <HomeButton path='/signUp' {...this.props}>SIGN UP</HomeButton>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\r\nimport React, { useContext, useState } from 'react'\r\nimport {signUp} from '../utils/testAPI';\r\nimport HomeButton from '../components/buttons/homeButton';\r\n\r\nexport default props => {\r\n    // const {message} = useContext(FBContext); \r\n    console.log('props: ', props); \r\n    const [username,setusername] = useState('');\r\n    const [password,setpassword] = useState('');\r\n    const [display_name,setdisplay_name] = useState('');\r\n    const [profile_pic_url,setprofile_pic_url] = useState('');\r\n\r\n\r\n    const usernameHandler = username=>{\r\n        setusername(username);\r\n    }\r\n    const passwordHandler = password=>{\r\n        setpassword(password);\r\n    }\r\n    const display_nameHandler = display_name=>{\r\n        setdisplay_name(display_name);\r\n    }\r\n    const profile_pic_urlHandler = profile_pic_url=>{\r\n        setprofile_pic_url(profile_pic_url);\r\n    }\r\n    const signUpHandler = async() =>{\r\n        let data = await signUp(username,password,display_name,profile_pic_url);\r\n        console.log(\"Result\" , data);\r\n        if(data !== null){\r\n            //TODO\r\n        }\r\n    }\r\n//    const charSelectHandler = event=>{\r\n//        const charId = event.target.value;\r\n//        setSelectCharacter(charId);\r\n//    }\r\n    //console.log(username,password);\r\n    return (\r\n    <div className=\"App\">\r\n        <h1> SignUp </h1> \r\n        {/* <SamplePage2 />  */}\r\n        <div id=\"signUp\">\r\n            <div id=\"username_signUp\">\r\n                Username:\r\n                <input onBlur= { e => usernameHandler(e.target.value)}/>\r\n            </div>\r\n            <div id=\"password_signUp\">\r\n                Password: \r\n                <input type='password' onBlur= { e => passwordHandler(e.target.value)}/>\r\n            </div>\r\n            <div id=\"password_signUp\">\r\n                Display Name: \r\n                <input onBlur= { e => display_nameHandler(e.target.value)}/>\r\n            </div>\r\n            <button onClick={()=>signUpHandler()}> SIGN UP </button>\r\n            <HomeButton path='/' {...props}>BACK</HomeButton>\r\n        </div>\r\n    </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Router from './pages/router'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport App from '../App';\r\nimport SignUP from \"./signUp\";\r\n\r\nexport default() => {\r\n    return(\r\n        <Router>\r\n            <Route exact path=\"/\" component={App} />\r\n            <Route path=\"/signUp\" component={SignUP} />\r\n        </Router>\r\n    );\r\n}"],"sourceRoot":""}