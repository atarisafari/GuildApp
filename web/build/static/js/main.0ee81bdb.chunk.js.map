{"version":3,"sources":["utils/apiCalls.js","components/buttons/homeButton.js","App.js","pages/signUp.js","components/Friend.js","pages/home.js","serviceWorker.js","index.js","pages/router.js"],"names":["signUp","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","username","password","display_name","response","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","mode","method","headers","Accept","Content-Type","body","JSON","stringify","sent","abrupt","text","then","console","log","parse","t0","stop","_x","_x2","apply","this","login","_ref2","_callee2","_context2","_x3","_x4","HomeButton","props","react_default","createElement","onClick","history","push","path","children","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","loggedIn","_this2","_this$state","loginHandler","data","error","localStorage","setItem","token","alert","className","id","placeholder","value","onChange","e","setState","objectSpread","target","type","homeButton","assign","Component","pages_signUp","_useState","useState","_useState2","slicedToArray","setusername","_useState3","_useState4","setpassword","_useState5","_useState6","confpassword","setconfpassword","_useState7","_useState8","setdisplay_name","_useState9","_useState10","profile_pic_url","signUpHandler","onBlur","Friend","Card","CardImg","top","width","src","alt","CardBody","CardTitle","name","CardSubtitle","CardText","Button","home","getItem","useEffect","logout","clear","map","index","components_Friend","key","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","react_router","exact","component","SignUP","Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ee81bdb.chunk.js","sourcesContent":["//const fetch = require('node-fetch');\r\nexport const signUp = async (username,password,display_name='',profile_pic_url='') => { \r\n    try{\r\n        let response = await fetch('http://157.230.66.35/php/signup.php', {\r\n        mode: 'cors',\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            username: username,\r\n            password: password,\r\n            display_name: display_name,\r\n            //profile_pic_url: profile_pic_url,\r\n        })\r\n        })\r\n        return response.text().then(function(text) {\r\n            console.log(text);\r\n            return text ? JSON.parse(text) : {}\r\n        })\r\n        //return data;        \r\n    }\r\n    catch(e){\r\n        console.log(e);\r\n    } \r\n}\r\n\r\nexport const login = async (username,password) => { \r\n    try{\r\n        let response = await fetch('http://157.230.66.35/php/login.php', {\r\n        mode: 'cors',\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            username: username,\r\n            password: password,\r\n        })\r\n        })\r\n        return response.text().then(function(text) {\r\n            console.log(text);\r\n            return text ? JSON.parse(text) : {}\r\n        })       \r\n    }\r\n    catch(e){\r\n        console.log(e);\r\n    } \r\n}\r\n\r\nexport const addPost = async (token,content,image_url,timestamp) => { \r\n    try{\r\n        let response = await fetch('http://157.230.66.35/php/addPost.php', {\r\n        mode: 'cors',\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            token: token,\r\n            content: content,\r\n            image_url: image_url,\r\n            timestamp: timestamp,\r\n        })\r\n        })\r\n        return response.text().then(function(text) {\r\n            console.log(text);\r\n            return text ? JSON.parse(text) : {}\r\n        })       \r\n    }\r\n    catch(e){\r\n        console.log(e);\r\n    } \r\n}","import React, { Component } from 'react';\r\n\r\nconst HomeButton = (props)=> {\r\n    return(\r\n        <button onClick={()=>props.history.push(props.path)}>{props.children}</button>\r\n    );\r\n}\r\nexport default HomeButton;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport {login} from './utils/apiCalls';\nimport HomeButton from './components/buttons/homeButton';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loggedIn: 'False',\n      username: '',\n      password:'',\n    }\n  }\n  render() {\n    const {username,password} = this.state;\n\n    const loginHandler = async() =>{\n        let data = await login(username,password);\n        console.log(\"Result\" , data);\n        if(data.error === \"\"){\n            console.log(\"Login was successful\");\n            localStorage.setItem('token', data.token);\n            this.props.history.push(\"/home\");\n        }\n        else{\n            alert(data.error);\n        }      \n  }\n\n    return (\n      <div className=\"App\">\n        <header id=\"sign_in_header\" className=\"App-header\">\n          <div className=\"container\">\n            <div id=\"logo_header\">\n                <p>LOGO</p>\n            </div>\n            <div id=\"login\">\n              <div id=\"username_login\">\n                Username:\n                <input placeholder=\"Username\" value={username} onChange= { e => this.setState({...this.state, username: e.target.value})}/>\n              </div>\n              <div id=\"password_login\">\n                Password: \n                <input placeholder=\"Password\" type='password' value={password} onChange= { e => this.setState({...this.state, password: e.target.value})}/>\n              </div>\n              <button onClick={()=>loginHandler()}> LOGIN </button>\n              <HomeButton path='/signUp' {...this.props}>SIGN UP</HomeButton>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\r\nimport React, { useContext, useState } from 'react'\r\nimport {signUp} from '../utils/apiCalls';\r\nimport HomeButton from '../components/buttons/homeButton';\r\n\r\nexport default props => {\r\n    // const {message} = useContext(FBContext); \r\n    console.log('props: ', props); \r\n    const [username,setusername] = useState('');\r\n    const [password,setpassword] = useState('');\r\n    const [confpassword,setconfpassword] = useState('');\r\n    const [display_name,setdisplay_name] = useState('');\r\n    const [profile_pic_url,setprofile_pic_url] = useState('');\r\n\r\n\r\n    const usernameHandler = username=>{\r\n        setusername(username);\r\n    }\r\n    const passwordHandler = password=>{\r\n        setpassword(password);\r\n    }\r\n    const confpasswordHandler = confpassword=>{\r\n        setconfpassword(confpassword);\r\n    }\r\n    const display_nameHandler = display_name=>{\r\n        setdisplay_name(display_name);\r\n    }\r\n    const profile_pic_urlHandler = profile_pic_url=>{\r\n        setprofile_pic_url(profile_pic_url);\r\n    }\r\n    const signUpHandler = async() =>{\r\n        if(password !== confpassword){ //If passwords don't match then dont make the api call\r\n            alert(\"Your passwords don't match, please try again.\");\r\n        }\r\n        else{\r\n            let data = await signUp(username,password,display_name,profile_pic_url);\r\n            console.log(\"Result\" , data);\r\n            if(data.error === \"\"){\r\n                //TODO\r\n                console.log(\"Sign up was successful\");\r\n                props.history.push(\"/\");\r\n            }\r\n            else{\r\n                alert(data.error);\r\n            }\r\n        }\r\n        \r\n    }\r\n//    const charSelectHandler = event=>{\r\n//        const charId = event.target.value;\r\n//        setSelectCharacter(charId);\r\n//    }\r\n    //console.log(username,password);\r\n    return (\r\n    <div className=\"App\">\r\n        <h1> SignUp </h1> \r\n        {/* <SamplePage2 />  */}\r\n        <div id=\"signUp\">\r\n            <div id=\"display_name_signUp\">\r\n                Display Name: \r\n                <input onBlur= { e => display_nameHandler(e.target.value)}/>\r\n            </div>\r\n            <div id=\"username_signUp\">\r\n                Username:\r\n                <input onBlur= { e => usernameHandler(e.target.value)}/>\r\n            </div>\r\n            <div id=\"password_signUp\">\r\n                Password: \r\n                <input type='password' onBlur= { e => passwordHandler(e.target.value)}/>\r\n            </div>\r\n            <div id=\"confirm_password_signUp\">\r\n                Retype Password: \r\n                <input type='password' onBlur= { e => confpasswordHandler(e.target.value)}/>\r\n            </div>\r\n            <button onClick={()=>signUpHandler()}> SIGN UP </button>\r\n            <HomeButton path='/' {...props}>BACK</HomeButton>\r\n        </div>\r\n    </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { Card, CardImg, CardText, CardBody,\r\n    CardTitle, CardSubtitle, Button } from 'reactstrap';\r\n\r\nconst Friend = (props) => {\r\n    return (\r\n        <div>\r\n        <Card>\r\n            <CardImg top width=\"100%\" src=\"https://placeholdit.imgix.net/~text?txtsize=33&txt=318%C3%97180&w=318&h=180\" alt=\"Card image cap\" />\r\n            <CardBody>\r\n            <CardTitle> {props.name}</CardTitle>\r\n            <CardSubtitle>{props.username}</CardSubtitle>\r\n            <CardText>Place Holder for latest post</CardText>\r\n            <Button>Button</Button>\r\n            </CardBody>\r\n        </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Friend;\r\n","\r\nimport React, { useContext, useState, useEffect  } from 'react'\r\nimport Friend from '../components/Friend';\r\n\r\nexport default props => {\r\n    const token = localStorage.getItem('token');\r\n    const [username,setusername] = useState('');\r\n    const name1 = \"ok\";\r\n    //const friends = ['one', 'two', 'three'];\r\n    const friends = [{\r\n        name: 'user1',\r\n        username: 'Username1',\r\n    },\r\n    {\r\n        name: 'user2',\r\n        username: 'Username2',\r\n    }];\r\n\r\n    useEffect(()=>{//This will run once and then only if token changes\r\n        if(token === null){ //If token is lost \r\n            //Or user accessed paged without login in\r\n            //Or if Boogie-Man went back from browser history and tried to login as the previous user\r\n            alert(\"Please Login to verify your identity\\nYou will now be redirected to the Login page.\");\r\n            logout();\r\n        }\r\n    }, [token]); //If this variable changes, this code will be run again\r\n\r\n    useEffect(()=>{//This will be executed always after the components have been rendered\r\n        //\r\n    },[]);//Array that contains all variables that if changed then that function should run again. [] = componentDidMount\r\n    \r\n    useEffect(()=>{ \r\n        //No logic\r\n        return()=>{\r\n            console.log(\"Component did unMount\");\r\n        }\r\n    }, [] );\r\n    \r\n    const LoadingIndicator = isLoading =>{\r\n        if (isLoading) {\r\n            return (\r\n            <div>\r\n                <p>Loading...</p>\r\n            </div>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    const logout = async() =>{\r\n        localStorage.clear();\r\n        props.history.push(\"/\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1> Home Page </h1> \r\n            {/* <Home />  */}\r\n            {\r\n                friends.map((value, index) => {\r\n                    return <Friend key={index} name={value.name} username={value.username}  /*{...props}*/></Friend>\r\n                })\r\n            }\r\n            \r\n            <button onClick={()=>logout()}> LOG OUT </button>\r\n        </div>\r\n    )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Router from './pages/router'\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport App from '../App';\r\nimport SignUP from \"./signUp\";\r\nimport Home from \"./home\";\r\n\r\nexport default() => {\r\n    return(\r\n        <Router>\r\n            <Route exact path=\"/\" component={App} />\r\n            <Route path=\"/signUp\" component={SignUP} />\r\n            <Route path=\"/home\" component={Home} />\r\n        </Router>\r\n    );\r\n}"],"sourceRoot":""}